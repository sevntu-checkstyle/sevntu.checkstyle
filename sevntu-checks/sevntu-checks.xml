<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
  <module name="SuppressionCommentFilter"/>
  <module name="TreeWalker">
    <module name="FileContentsHolder"/>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidCCommentsInMethods">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.naming.InterfaceTypeParameterNameCheck">
      <property name="format" value="^[A-Z]$"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.NoNullForCollectionReturnCheck">
      <property name="collectionList" value="AbstractCollection AbstractList AbstractQueue AbstractSequentialList AbstractSet ArrayBlockingQueue ArrayDeque ArrayList AttributeList BeanContextServicesSupport BeanContextSupport ConcurrentLinkedDeque ConcurrentLinkedQueue ConcurrentSkipListSet CopyOnWriteArrayList CopyOnWriteArraySet DelayQueue EnumSet HashSet JobStateReasons LinkedBlockingDeque LinkedBlockingQueue LinkedHashSet LinkedList LinkedTransferQueue PriorityBlockingQueue PriorityQueue RoleList RoleUnresolvedList Stack SynchronousQueue TreeSet Vector Collection List Map Set"/>
      <property name="searchThroughMethodBody" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.CustomDeclarationOrderCheck">
      <property name="customDeclarationOrder" value="Field(public) ### Field(protected) ### Field(private) ### CTOR(.*) ### Method(.*)### InnerClass()"/>
      <property name="caseSensitive" value="true"/>
      <property name="fieldPrefix" value=""/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidReturnInFinallyBlockCheck">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.MultipleStringLiteralsExtendedCheck">
      <property name="severity" value="warning"/>
      <property name="allowedDuplicates" value="1"/>
      <property name="ignoreOccurrenceContext" value="ANNOTATION"/>
      <property name="ignoreStringsRegexp" value="^&quot;&quot;$"/>
      <property name="highlightAllDuplicates" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidDefaultSerializableInInnerClasses">
      <property name="allowPartialImplementation" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ConfusingConditionCheck">
      <property name="multiplyFactorForElseBlocks" value="4"/>
      <property name="ignoreInnerIf" value="true"/>
      <property name="ignoreSequentialIf" value="true"/>
      <property name="ignoreNullCaseInIf" value="true"/>
      <property name="ignoreThrowInElse" value="true"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.sizes.LineLengthExtendedCheck">
      <property name="severity" value="warning"/>
      <property name="ignorePattern" value="^$"/>
      <property name="max" value="80"/>
      <property name="tabWidth" value="8"/>
      <property name="ignoreClass" value="false"/>
      <property name="ignoreConstructor" value="false"/>
      <property name="ignoreField" value="false"/>
      <property name="ignoreMethod" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.LogicConditionNeedOptimizationCheck">
      <property name="severity" value="warning"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.ChildBlockLengthCheck">
      <property name="severity" value="warning"/>
      <property name="blockTypes" value="LITERAL_IF,LITERAL_ELSE,LITERAL_WHILE,LITERAL_DO,LITERAL_FOR,LITERAL_SWITCH,LITERAL_TRY,LITERAL_CATCH"/>
      <property name="maxChildBlockPercentage" value="90"/>
      <property name="ignoreBlockLinesCount" value="50"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ReturnBooleanFromTernary">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ReturnNullInsteadOfBoolean">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidCertainImportsCheck">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidModifiersForTypesCheck">
      <property name="forbiddenClassesRegexpFinal" value=""/>
      <property name="forbiddenClassesRegexpStatic" value="ULC.+"/>
      <property name="forbiddenClassesRegexpTransient" value=""/>
      <property name="forbiddenClassesRegexpVolatile" value=""/>
      <!-- 1.20.0 -->
      <property name="forbiddenClassesRegexpAnnotation" value=""/>
      <property name="forbiddenClassesRegexpPrivate" value=""/>
      <property name="forbiddenClassesRegexpPackagePrivate" value=""/>
      <property name="forbiddenClassesRegexpProtected" value=""/>
      <property name="forbiddenClassesRegexpPublic" value=""/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.OverridableMethodInConstructorCheck">
      <property name="severity" value="warning"/>
      <property name="checkCloneMethod" value="false"/>
      <property name="checkReadObjectMethod" value="false"/>
      <property name="matchMethodsByArgCount" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidNotShortCircuitOperatorsForBooleanCheck">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.MultipleVariableDeclarationsExtendedCheck">
      <property name="ignoreCycles" value="false"/>
      <property name="ignoreMethods" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.ForbidWildcardAsReturnTypeCheck">
      <property name="checkPublicMethods" value="true"/>
      <property name="checkPackageMethods" value="true"/>
      <property name="checkProtectedMethods" value="true"/>
      <property name="checkPrivateMethods" value="false"/>
      <property name="checkOverrideMethods" value="false"/>
      <property name="checkDeprecatedMethods" value="false"/>
      <property name="allowReturnWildcardWithSuper" value="false"/>
      <property name="allowReturnWildcardWithExtends" value="false"/>
      <property name="returnTypeClassNamesIgnoreRegex" value="^(Comparator|Comparable)$"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.EitherLogOrThrowCheck">
      <property name="loggerFullyQualifiedClassName" value="org.slf4j.Logger"/>
      <property name="loggingMethodNames" value="error, warn, info, debug"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidHidingCauseExceptionCheck">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.IllegalCatchExtendedCheck">
      <property name="allowThrow" value="true"/>
      <property name="allowRethrow" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ReturnCountExtendedCheck">
      <property name="maxReturnCount" value="1"/>
      <property name="ignoreMethodLinesCount" value="20"/>
      <property name="minIgnoreReturnDepth" value="4"/>
      <property name="ignoreEmptyReturns" value="true"/>
      <property name="topLinesToIgnoreCount" value="5"/>
      <property name="ignoreMethodsNames" value="equals"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.SimpleAccessorNameNotationCheck">
      <property name="severity" value="warning"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.UnnecessaryParenthesesExtendedCheck">
      <property name="ignoreCalculationOfBooleanVariables" value="false"/>
      <property name="ignoreCalculationOfBooleanVariablesWithReturn" value="false"/>
      <property name="ignoreCalculationOfBooleanVariablesWithAssert" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidInstantiationCheck">
      <property name="forbiddenClasses" value="java.lang.NullPointerException"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.AvoidConstantAsFirstOperandInConditionCheck">
      <property name="targetConstantTypes" value="LITERAL_NULL,LITERAL_TRUE,LITERAL_FALSE,NUM_INT,NUM_DOUBLE,NUM_LONG,NUM_FLOAT"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.NoMainMethodInAbstractClassCheck">
    </module>
    <!-- since 1.11 -->
    <module name="com.github.sevntu.checkstyle.checks.naming.EnumValueNameCheck">
      <property name="objFormat" value="^[A-Z][a-zA-Z0-9]*$"/>
      <property name="constFormat" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
      <property name="excludes" value="toString"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.ForbidThrowAnonymousExceptionsCheck">
    <property name="exceptionClassNameRegex" value="^.*Exception"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.MapIterationInForEachLoopCheck">
      <property name="proposeValuesUsage" value="true"/>
      <property name="proposeKeySetUsage" value="false"/>
      <property name="proposeEntrySetUsage" value="false"/>
    </module>
    <!-- since 1.12 -->
    <module name="com.github.sevntu.checkstyle.checks.coding.TernaryPerExpressionCountCheck">
      <property name="maxTernaryPerExpressionCount" value="1"/>
      <property name="ignoreTernaryOperatorsInBraces" value="true"/>
      <property name="ignoreIsolatedTernaryOnLine" value="true"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.RedundantReturnCheck">
      <property name="allowReturnInEmptyMethodsAndConstructors" value="false"/>
    </module>
    <module name="com.github.sevntu.checkstyle.checks.design.PublicReferenceToPrivateTypeCheck">
    </module>
    <!-- 1.16.0 , but moved to checkstyle project since 1.21.0 -->
    <!-- <module name="com.github.sevntu.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck">
      <property name="severity" value="warning"/>
      <property name="validateCommentNodes" value="false"/>
    </module>
    -->
    <!-- 1.17.0 -->
    <module name="com.github.sevntu.checkstyle.checks.design.StaticMethodCandidateCheck">
      <property name="skippedMethods" value="readObject, writeObject, readObjectNoData, readResolve, writeReplace"/>
    </module>
    <!-- 1.18.0 -->
    <module name="com.github.sevntu.checkstyle.checks.coding.SingleBreakOrContinueCheck">
    </module>
    <module name="com.github.sevntu.checkstyle.checks.coding.NumericLiteralNeedsUnderscoreCheck" >
      <property name="minDecimalSymbolLength" value="7"/>
      <property name="maxDecimalSymbolsUntilUnderscore" value="3"/>
      <property name="minHexSymbolLength" value="5"/>
      <property name="maxHexSymbolsUntilUnderscore" value="4"/>
      <property name="minBinarySymbolLength" value="9"/>
      <property name="maxBinarySymbolsUntilUnderscore" value="8"/>
      <!-- 1.19.1 -->
      <property name="ignoreFieldNamePattern" value="serialVersionUID"/>
    </module>
    <!-- 1.20.0 -->
    <module name="com.github.sevntu.checkstyle.checks.design.ConstructorWithoutParamsCheck" >
      <property name="classNameFormat" value=".*Exception"/>
      <property name="ignoredClassNameFormat" value="UnsupportedOperationException"/>
    </module>
    <!-- 1.21.0 -->
    <module name="com.github.sevntu.checkstyle.checks.naming.UniformEnumConstantNameCheck" >
      <property name="formats" value="^[A-Z][a-zA-Z0-9]*$,^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
    </module>
    <!-- 1.22.0 -->
    <module name="com.github.sevntu.checkstyle.checks.annotation.ForbidAnnotationElementValueCheck" >
      <property name="annotationName" value="Test"/>
      <property name="elementName" value="expected"/>
      <property name="forbiddenElementValueRegexp" value=".*"/>
    </module>
  </module>
</module>
