avoid.default.serializable.in.inner.classes=Inner class should not implement default Serializable interface.
avoid.hiding.cause.exception=Cause exception ''{0}'' was lost.
avoid.not.short.circuit.operators.for.boolean=Short-circuit operator should be used instead of ''{0}''.
avoid.modifiers.for.types=''{0}'' instance should not have ''{1}'' modifier.
avoid.constant.as.first.operand.in.condition=Constant have to be second operand of ''{0}''.
confusing.condition.check=Avoid negation within an "if" expression with an "else" clause.
custom.declaration.order.field=Field definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.constructor=Constructor definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.method=Method definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.class=Class definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.interface=Interface definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.enum=Enum definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.invalid.setter=Setter ''{0}'' is in wrong order. Should be right after ''{1}''.
diamond.operator.for.variable.definition = Diamond operator expected.
empty.public.ctor=This empty public constructor is useless.
either.log.or.throw=Either log or throw exception.
finalize.implementation.missed.try.finally = finalize() method should contain try-finally block with super.finalize() call inside finally block.
finalize.implementation.public = finalize() method should have a "protected" visibility.
finalize.implementation.useless = finalize() method is useless: it does nothing except for calling super.finalize().
finalize.implementation.missed.super.finalize = You have to call super.finalize() right after finally opening brace.
forbid.certain.imports=Import ''{1}'' should not match ''{0}'' pattern, it is forbidden.
forbid.certain.method=Call to ''{0}'' method (matches pattern {1}) with ''{2}'' arguments (matches pattern {3}) is forbidden.
forbid.c.comments.in.the.method.body=C-style comments (/*...*/) inside method body are not allowed.
forbid.return.in.finally.block=Finally block should not contain return statements.
forbid.throw.anonymous.exception=Avoid throwing anonymous exception.
illegal.catch=Catching ''{0}'' is not allowed.
forbid.instantiation=Instantiation of ''{0}'' is not allowed.
incorrect.getter.name=Unexpected getter name.
incorrect.setter.name=Unexpected setter name.
logic.condition.need.optimization=Condition with {0} at line {1} position {2} need optimization. All method calls are advised to move to end of logic expression.
map.iteration.entrySet=You are using both keys and values for this map. It is better to use entrySet() instead of keySet() + get().
map.iteration.keySet=It is better to use keySet() method to iterate over this map because you aren`t using values.
map.iteration.values=You are using only values of this map. It is better to use values() to iterate this map.
move.variable.inside=Variable ''{0}'' can be moved inside the block at line ''{1}'' to restrict runtime creation.
multiple.string.literal=The String {0} appears {1} times in the file.
multiple.variable.declarations=Only one variable definition per line allowed.
multiple.variable.declarations.comma=Each variable declaration must be in its own statement.
name.convention.for.test.classes=JUnit test class name should match ''{0}'' pattern.
no.null.for.collections=Method should return empty collection instead of null.
numeric.literal.need.underscore=Numeric literal should have underscores.
overridable.method=Overridable method ''{0}'' is called in {1} body.
overridable.method.leads=Calling the method ''{0}'' in {1} body leads to the call of the overridable method ''{2}''.
redundant.return.check=Redundant return.
require.fail=try/catch either requires a fail at the end of the try clause for junit tests or to remove the try/catch completely.
return.count.extended.method=Return count for ''{0}'' method is {1} (max allowed is {2}).
return.count.extended.ctor=Return count for ''{0}'' constructor is {1} (max allowed is {2}).
return.count.extended.lambda=Return count for the lambda is {0} (max allowed is {1}).
single.break.or.continue.in.loops=Loops should not contain more than a single "break" or "continue" statement
ternary.per.expression.count=More than {0} ternary operators in expression.
unnecessary.paren.assign=Unnecessary parentheses around assignment right-hand side.
unnecessary.paren.expr=Unnecessary parentheses around expression.
unnecessary.paren.ident=Unnecessary parentheses around identifier ''{0}''.
unnecessary.paren.literal=Unnecessary parentheses around literal ''{0}''.
unnecessary.paren.return=Unnecessary parentheses around return value.
unnecessary.paren.string=Unnecessary parentheses around string {0}.
useless.single.catch.check=Useless catch block. No logging, wrapping or handling code here.
useless.super.ctor.call.in.not.derived.class= Super call could be removed: Class ''{0}'' does not extend anything.
useless.super.ctor.call.without.args= Redundant super constructor call could be removed. Class ''{0}'' has superclass. Java compiler automatically inserts a call to the no-argument constructor of the superclass.
return.null.Boolean=Method declares to return Boolean and returns null.
return.boolean.ternary=Returning explicit boolean from ternary operator.
whitespace.before.array.initializer=Array initializer should have whitespace before.
