array.trailing.comma=Array should contain trailing comma.
assignment.inner.avoid=Inner assignments should be avoided.
avoid.declare.constants=Constants declaration inside interfaces should be avoided.
avoid.default.serializable.in.inner.classes=Inner class should not implement default Serializable interface.
avoid.finalizer.method=Usage of finalizer method should be avoided.
avoid.clone.method=Usage of 'clone' method should be avoided.
avoid.hiding.cause.exception=Cause exception ''{0}'' was lost.
avoid.not.short.circuit.operators.for.boolean=Short-circuit operator should be used instead of ''{0}''.
avoid.modifiers.for.types=''{0}'' instance should not have ''{1}'' modifier.
avoid.constant.as.first.operand.in.condition=Constant have to be second operand of ''{0}''.
covariant.equals=Covariant equals without overriding equals(java.lang.Object).
confusing.condition.check=Avoid negation within an "if" expression with an "else" clause.
custom.declaration.order.field=Field definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.constructor=Constructor definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.method=Method definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.class=Class definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.interface=Interface definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.enum=Enum definition in wrong order. Expected ''{0}'' then ''{1}''.
custom.declaration.order.invalid.setter=Setter ''{0}'' is in wrong order. Should be right after ''{1}''.
declaration.order.constructor=Constructor definition in wrong order.
declaration.order.method=Method definition in wrong order.
declaration.order.static=Static variable definition in wrong order.
declaration.order.instance=Instance variable definition in wrong order.
declaration.order.access=Variable access definition in wrong order.
default.comes.last=Default should be the last switch label.
diamond.operator.for.variable.definition = Diamond operator expected.
doublechecked.locking.avoid=The double-checked locking idiom is broken and should be avoided.
empty.statement=Empty statement.
empty.public.ctor=This empty public constructor is useless.
enum.trailing.comma=Enum constant should contain trailing comma.
enum.trailing.comma.semi=Enum constant should contain trailing comma without semi-colon afterwards.
equals.avoid.null=String literal expressions should be on the left side of an equals comparison.
equals.noHashCode=Definition of ''equals()'' without corresponding definition of ''hashCode()''.
either.log.or.throw=Either log or throw exception.
explicit.init=Variable ''{0}'' explicitly initialized to ''{1}'' (default value for its type).
fall.through=Fall through from previous branch of the switch statement.
fall.through.last=Fall through from the last branch of the switch statement.
final.variable=Variable ''{0}'' should be declared final.
finalize.implementation.missed.try.finally = finalize() method should contain try-finally block with super.finalize() call inside finally block.
finalize.implementation.public = finalize() method should have a "protected" visibility.
finalize.implementation.useless = finalize() method is useless: it does nothing except for calling super.finalize().
finalize.implementation.missed.super.finalize = You have to call super.finalize() right after finally opening brace.
forbid.certain.imports=Import ''{1}'' should not match ''{0}'' pattern, it is forbidden.
forbid.c.comments.in.the.method.body=C-style comments (/*...*/) inside method body are not allowed.
forbid.return.in.finally.block=Finally block should not contain return statements.
forbid.throw.anonymous.exception=Avoid throwing anonymous exception.
hidden.field=''{0}'' hides a field.
illegal.catch=Catching ''{0}'' is not allowed.
illegal.throw=Throwing ''{0}'' is not allowed.
forbid.instantiation=Instantiation of ''{0}'' is not allowed.
illegal.token=Usage of ''{0}'' is not allowed.
illegal.token.text=Token text matches an illegal pattern ''{0}''.
illegal.type=Declaring variables, return values or parameters of type ''{0}'' is not allowed.
incorrect.getter.name=Unexpected getter name.
incorrect.setter.name=Unexpected setter name.
inline.conditional.avoid=Inline conditionals should be avoided.
instantiation.avoid=Instantiation of {0} should be avoided.
junit.method.name=The method ''{0}'' should be named ''{1}''.
junit.method.return.type=The method ''{0}'' must be declared with a {1} return type.
junit.method.parameters=The method ''{0}'' must be declared with no parameters.
junit.method.public.and.static=The method ''{0}'' must be declared static.
junit.method.protected.or.public=The method ''{0}'' must be public or protected.
junit.method.static=The method ''{0}'' shouldn''t be static.
logic.condition.need.optimization=Condition with {0} at line {1} position {2} need optimization. All method calls are advised to move to end of logic expression.
magic.number=''{0}'' is a magic number.
map.iteration.entrySet=You are using both keys and values for this map. It is better to use entrySet() instead of keySet() + get().
map.iteration.keySet=It is better to use keySet() method to iterate over this map because you aren`t using values.
map.iteration.values=You are using only values of this map. It is better to use values() to iterate this map.
redundant.return=Redundant return.
missing.ctor=Class should define a constructor.
missing.package.declaration=Missing package declaration.
missing.super.call=Method ''{0}'' should call ''super.{0}''.
missing.switch.default=switch without \"default\" clause.
modified.control.variable=Control variable ''{0}'' is modified.
multiple.string.literal=The String {0} appears {1} times in the file.
multiple.variable.declarations=Only one variable definition per line allowed.
multiple.variable.declarations.comma=Each variable declaration must be in its own statement.
name.convention.for.test.classes=JUnit test class name should match ''{0}'' pattern.
nested.if.depth=Nested if-else depth is {0,number,integer} (max allowed is {1,number,integer}).
nested.try.depth=Nested try depth is {0,number,integer} (max allowed is {1,number,integer}).
no.null.for.collections=Method should return empty collection instead of null.
numeric.literal.need.underscore=Numeric literal should have underscores.
overridable.method=Overridable method ''{0}'' is called in {1} body.
overridable.method.leads=Calling the method ''{0}'' in {1} body leads to the call of the overridable method ''{2}''.
parameter.assignment=Assignment of parameter ''{0}'' is not allowed.
redundant.return.check=Redundant return.
redundant.throws.classInfo=Unable to get class information for {0}.
redundant.throws.duplicate=Redundant throws: ''{0}'' listed more then one time.
redundant.throws.subclass=Redundant throws: ''{0}'' is subclass of ''{1}''.
redundant.throws.unchecked=Redundant throws: ''{0}'' is unchecked exception.
require.this.variable=Reference to instance variable ''{0}'' needs \"this.\".
require.this.unfound.variable=Unable find where ''{0}'' is declared.
require.this.method=Method call to ''{0}'' needs \"this.\".
return.count.extended.method=Return count for ''{0}'' method is {1} (max allowed is {2}).
return.count.extended.ctor=Return count for ''{0}'' constructor is {1} (max allowed is {2}).
return.depth=Return depth is {0,number,integer} (max allowed is {1,number,integer}).
simplify.boolreturn=Conditional logic can be removed.
simplify.expression=Expression can be simplified.
single.break.or.continue.in.loops=Loops should not contain more than a single "break" or "continue" statement
string.literal.equality=Literal Strings should be compared using equals(), not ''{0}''.
ternary.per.expression.count=More than {0} ternary operators in expression.
unnecessary.paren.assign=Unnecessary parentheses around assignment right-hand side.
unnecessary.paren.expr=Unnecessary parentheses around expression.
unnecessary.paren.ident=Unnecessary parentheses around identifier ''{0}''.
unnecessary.paren.literal=Unnecessary parentheses around literal ''{0}''.
unnecessary.paren.return=Unnecessary parentheses around return value.
unnecessary.paren.string=Unnecessary parentheses around string {0}.
useless.single.catch.check=Useless catch block. No logging, wrapping or handling code here.
useless.super.ctor.call.in.not.derived.class= Super call could be removed: Class ''{0}'' does not extend anything.
useless.super.ctor.call.without.args= Redundant super constructor call could be removed. Class ''{0}'' has superclass. Java compiler automatically inserts a call to the no-argument constructor of the superclass.
return.null.Boolean=Method declares to return Boolean and returns null.
return.boolean.ternary=Returning explicit boolean from ternary operator.
whitespace.before.array.initializer=Array initializer should have whitespace before.
