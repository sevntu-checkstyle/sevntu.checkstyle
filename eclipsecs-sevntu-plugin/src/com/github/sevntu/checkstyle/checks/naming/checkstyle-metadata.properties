AbbreviationAsWordInName.name = Abbreviation As Word In Name
AbbreviationAsWordInName.desc = Check name of the targeted item to validate abbreviations(capital letters) length in it. Options: AllowedAbbreviationLength - allowed abbreviation length(length of capital characters). AllowedAbbreviations - list of abbreviations separated by comma, without spaces.
AbbreviationAsWordInName.allowedAbbreviationLength = Amount of allowed capital letters in abbreviation
AbbreviationAsWordInName.allowedAbbreviations = an string of abbreviations that must be skipped from checking, each abbreviation separated by comma, no spaces are allowed.
AbbreviationAsWordInName.targets = Targets for a check that need to be validated.
AbbreviationAsWordInName.ignoreFinal = Allows to ignore variables with 'final' modifier.
AbbreviationAsWordInName.ignoreStatic = Allows to ignore variables with 'static' modifier.
AbbreviationAsWordInName.ignoreOverriddenMethods = Allows to ignore methods with '@Override' annotation.

InterfaceTypeParameterNameCheck.name = Interface type parameter name check
InterfaceTypeParameterNameCheck.desc = Checks that interface type parameter names conform to a format specified by the format property
InterfaceTypeParameterNameCheck.format = Regex that interface type parameter names must to conform

EnumValueName.name = Check for enum values name
EnumValueName.desc = <p>Check forces enum values to match the specific pattern. According to "Java Coding Style" by Achut Reddy p 3.3 constants include "all static final object reference types that are never followed by " ." (dot).", i.e. enums, which are followed by dot while used in the code are to be treated as static object references, while enums, that are not used with following dot, should be treated as constants.</p><p>Enums are defined to be used as class have some own methods. This condition is used to distinguish between Values Enumeration and Class Enumeration. Values Enumeration looks like the following:</p><pre>enum SimpleErrorEnum\n  {\n      FIRST_SIMPLE, SECOND_SIMPLE, THIRD_SIMPLE;\n  }</pre><p>While Class Enumeration has some methods, for example:</p><pre> enum SimpleErrorEnum\n   {\n       FIRST_SIMPLE, SECOND_SIMPLE, THIRD_SIMPLE;\n \n       public String toString() {\n           return Integer.toString(ordinal() + 10);\n       }\n   }</pre><p>Name format for Class Enumeration is specified with setObjFormat(String) , while format for enum constants - with setConstFormat(String)</p><p>To avoid assuming enum as static object reference, while using some specific methods, setExcludes(List) can be used. For example to make enum in the previous example a constant set Excludes property to a value toString</p><p>By default toString is used as an exclusion.</p>
EnumValueName.constFormat = Regex for Values Enumeration names to conform
EnumValueName.objFormat = Regex for Class Enumeration names to conform
EnumValueName.excludes = Exclude method and field names regexp list (comma-separated)
