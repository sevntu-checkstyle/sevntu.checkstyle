ForbidAnnotation.name					= Forbid Annotation
ForbidAnnotation.desc          			= Forbid specific annotation of variable,methods,class,package and other.
ForbidAnnotation.annotationNames 		= Set of annotation's names
ForbidAnnotation.annotationTargets    	= Array of type forbidden annotation's target.

ForbidParameterInAnnotation.name		   = ForbidParameterInAnnotation
ForbidParameterInAnnotation.desc		   =  Forbids specific parameter value for specific annotation. </br> Example of usage:<br/> In JUnit4 &#64;Test annotation has an "expected" parameter which allows developer to specify expected exception type. It's disadvantage </br>is that it prints exceptions stack traces into sysout (<a href='http://stackoverflow.com/questions/9375704/ignoring-stacktrace-when-testing-for-exceptions-in-junit'>See this stackoverflow thread</a>). </br> <pre> &#064;Test(expected = IndexOutOfBoundsException.class)</br> public void outOfBounds()</br> {</br>     new ArrayList&lt;Object&gt;().get(1);</br> }</br> </pre> Using this check you could forbid parameter value </br> "IndexOutOfBoundsException.class" and so force user to write method with </br> usual Test annotation like this: <br/> <pre> &#64;Test public void TestForException(){</br>     try{</br>         DoSomething();</br>         Fail();</br>     } catch(Exception e) {</br>       Assert.That(e.msg, Is("Bad thing happened"))</br>     }</br> }</br> </pre>
ForbidParameterInAnnotation.annotationName = Annotation Name
ForbidParameterInAnnotation.parameterName  = Parameter name
ForbidParameterInAnnotation.parameterValueRegexp = Parameter value regular expression
