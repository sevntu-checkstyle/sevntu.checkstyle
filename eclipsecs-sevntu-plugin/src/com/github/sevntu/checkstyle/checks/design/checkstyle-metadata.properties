VariableDeclarationUsageDistance.name = Variable Declaration Usage Distance
VariableDeclarationUsageDistance.desc = Checks distance between declaration of variable and its first usage.<br/>\r\n<br/>\r\nRationale: By minimizing the distance between declaration of variable and its first usage, you increase the readability and maintainability of your code and reduce the likelihood of error. See Bloch, Effective Java, Item 45: Minimize the scope of local variables.<br/>\r\n<br/>\r\nExample #1:<br/>\r\n<br/>\r\nint count;<br/>\r\na = a + b;<br/>\r\nb = a + a;<br/>\r\ncount = b; // DECLARATION OF VARIABLE 'count' SHOULD BE HERE (distance = 3)<br/>\r\n<br/>\r\nExample #2:<br/>\r\n<br/>\r\nint count;<br/>\r\n{<br/>\r\na = a + b;<br/>\r\ncount = b; // DECLARATION OF VARIABLE 'count' SHOULD BE HERE (distance = 2)<br/>\r\n}<br/>\r\n<br/>\r\n <p>Check can detect block of initialization methods. If variable is used in such block and after variable declaration there is no other statements, then distance=1. Example:</p><p><b>Case #1:</b><pre>int <b>minutes</b> = 5;\nCalendar cal = Calendar.getInstance();\ncal.setTimeInMillis(timeNow);\ncal.set(Calendar.SECOND, 0);\ncal.set(Calendar.MILLISECOND, 0);\ncal.set(Calendar.HOUR_OF_DAY, hh);\ncal.set(Calendar.MINUTE, <b>minutes</b>);\n\nDistance for variable <b>minutes</b> is 1, although this variable is used in fifth method call.</pre></p><p><b>Case #2:</b><pre>int <b>minutes</b> = 5;\nCalendar cal = Calendar.getInstance();\ncal.setTimeInMillis(timeNow);\ncal.set(Calendar.SECOND, 0);\ncal.set(Calendar.MILLISECOND, 0);\n<i>System.out.println(cal);</i>\ncal.set(Calendar.HOUR_OF_DAY, hh);\ncal.set(Calendar.MINUTE, <b>minutes</b>);\n\nDistance for variable <b>minutes</b> is 6, because between declaration and usage there is one more expression except initialization block.</pre></p> ATTENTION!! (Not supported cases)<br/>\r\n<br/>\r\nCase #1:<br/>\r\n<br/>\r\n{<br/>\r\nint c;<br/>\r\nint a = 3;<br/>\r\nint b = 2;<br/>\r\n{<br/>\r\n\ta = a + b;<br/>\r\n\tc = b;<br/>\r\n}<br/>\r\n}<br/>\r\n<br/>\r\nDistance for variable 'a' = 1;<br/>\r\nDistance for variable 'b' = 1;<br/>\r\nDistance for variable 'c' = 2.<br/>\r\n<br/>\r\nAs distance by default is 1 the Check doesn't raise warning for variables 'a' and 'b' to move them into the block.<br/>\r\n<br/>\r\nCase #2:<br/>\r\n<br/>\r\nint sum = 0;<br/>\r\nfor (int i = 0; i < 20; i++) {<br/>\r\n\ta++;<br/>\r\n\tb--;<br/>\r\n\tsum++;<br/>\r\n\tif (sum > 10) {<br/>\r\n\t\tres = true;<br/>\r\n\t}<br/>\r\n}<br/>\r\n<br/>\r\nDistance for variable 'sum' = 3.<br/>\r\n<br/>\r\nAs distance more then default one, the Check raises warning for variable 'sum' to move it into the 'for(...)' block. But there is situation when variable 'sum' hasn't to be 0 within each iteration. So, to avoid such warnings you can use Suppression Filter, provided by Checkstyle, for the whole class.
VariableDeclarationUsageDistance.ignoreVariablePattern = RegEx pattern for ignoring distance calculation for variables listed in this pattern
VariableDeclarationUsageDistance.allowedDistance = Allowed distance between declaration of variable and its first usage
VariableDeclarationUsageDistance.validateBetweenScopes = Allows to calculate distance between declaration of variable and its first usage in different scopes
VariableDeclarationUsageDistance.ignoreFinal = Allows to ignore variables with 'final' modifier.

CauseParameterInException.name = Cause Parameter In Exception
CauseParameterInException.desc = Checks that any Exception class which matches the defined className regexp have at least one constructor with Exception cause as a parameter.<br><br>Parameters:<dl><li>Exception classNames regexp. ("classNamesRegexp" option)</li><li>regexp to ignore classes by names ("ignoredClassNamesRegexp" option).</li><li>The names of classes which would be considered as Exception cause ("allowedCauseTypes" option).</li><br></dl>
CauseParameterInException.classNamesRegexp = The regexp for the names of classes, that should be checked. Default value = ".+Exception".
CauseParameterInException.ignoredClassNamesRegexp = The regexp for the names of classes, that should be ignored by check.
CauseParameterInException.allowedCauseTypes = The names of classes which would be considered as Exception cause, separated by comma. Default value = "Throwable, Exception".

ChildBlockLength.name = Child Block Length
ChildBlockLength.desc = This check detects the child blocks, which length is more then 80% of parent block length.<br><p>Supported keywords are used to detect blocks:<br>"if", "else", "for", "switch", "do", "while", "try", "catch".</p><p><i>Rationale:</i></p><p>Length of child block that is more then 80% of parent block is usually hard to read in case child block is long(few display screens). Such child blocks should be refactored or moved to separate method.
ChildBlockLength.allowedBlockTypes = Option to switch the block types that will be checked. 
ChildBlockLength.maxChildBlockPercentage = Maximum percentage ratio between the child block and the parent block. Default value = 80%;
ChildBlockLength.ignoreBlockLinesCount = Maximum number of lines of which block body may consist to be skipped by check.

NoMainMethodInAbstractClass.name = No Main Method In Abstract Class
NoMainMethodInAbstractClass.desc = Forbids main methods in abstract classes. Rationale: existance of 'main' method can mislead a developer to consider this class as a ready-to-use implementation.

ForbidWildcardAsReturnType.name = Forbid Wildcard As Return Type
ForbidWildcardAsReturnType.desc = Prevents using wildcards as return type of methods.<p><i>Joshua Bloch, "Effective Java (2nd edition)" Item 28: page 137 :</i></p> <p>"Do not use wildcard types as return types. Rather than providing additional flexibility for your users, it would force them to use wildcard types in client code. Properly used, wildcard types are nearly invisible to users of a class. They cause methods to accept the parameters they should accept and reject those they should reject. If the user of a class has to think about wildcard types, there is probably something wrong with the class\u2019s API."</p>
ForbidWildcardAsReturnType.checkPublicMethods = Check public methods 
ForbidWildcardAsReturnType.checkPackageMethods = Check protected-package methods
ForbidWildcardAsReturnType.checkProtectedMethods = Check protected methods
ForbidWildcardAsReturnType.checkPrivateMethods = Check private methods
ForbidWildcardAsReturnType.checkOverrideMethods = Check override methods
ForbidWildcardAsReturnType.checkDeprecatedMethods = Check deprecated methods
ForbidWildcardAsReturnType.allowReturnWildcardWithSuper = Allow wildcard with "super". Example: "? super T"
ForbidWildcardAsReturnType.allowReturnWildcardWithExtends = Allow wildcard with "extends". Example: "? extends T"
ForbidWildcardAsReturnType.returnTypeClassNamesIgnoreRegex = Ignore regex for return type class names