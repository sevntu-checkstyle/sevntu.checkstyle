AvoidConditionInversionCheck.name = Avoid Condition Inversion
AvoidConditionInversionCheck.desc = This Check helps to catch condition inversion cases which could be rewritten in a more<br>readable manner<br>There're cases where it's justified to get rid of such inversion without changing<br>the main logic. E.g.:<p><code>if (!(( a >= 8) && ( b >= 5))) { ... }</code></p><p>It can be rewritten as:</p><p><code>if ((a < 8) && (b < 5)) { ... }</code></p><p><code>if (!(a != b)) { ... }</code></p><p>as</p><code>if (a == b) { ... } </code></p>Sure, there're cases where we can't get rid of inversion without changing the main logic, e.g.:<p><code>return !(list.isEmpty());</code></p><p><code>return !(obj instanceof SomeClass);</code></p>That's why Check has following property:<br><b>applyOnlyToRelationalOperands</b> - if true Check will only put violation on<br>condition inversions with <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/opsummary.html">relational</a> operands.<br>This option makes Check less strict, e.g.:<br>Using with value <b>true</b> does not put violation on code below:<br><p><code>if (! (obj instanceof SomeClass || obj1.isValid())) { ... }</code></p>@author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>
AvoidConditionInversionCheck.applyOnlyToRelationalOperands = Avoid condition inversion only with relational operands.

CauseParameterInExceptionCheck.name = Cause Parameter In Exception
CauseParameterInExceptionCheck.desc = Checks that any Exception class which matches the defined className regexp have at least one constructor with Exception cause as a parameter.<br><br>Parameters:<dl><li>Exception classNames regexp. ("classNamesRegexp" option)</li><li>regexp to ignore classes by names ("ignoredClassNamesRegexp" option).</li><li>The names of classes which would be considered as Exception cause ("allowedCauseTypes" option).</li><br></dl>
CauseParameterInExceptionCheck.classNamesRegexp = The regexp for the names of classes, that should be checked. Default value = ".+Exception".
CauseParameterInExceptionCheck.ignoredClassNamesRegexp = The regexp for the names of classes, that should be ignored by check.
CauseParameterInExceptionCheck.allowedCauseTypes = The names of classes which would be considered as Exception cause, separated by comma. Default value = "Throwable, Exception".

ChildBlockLengthCheck.name = Child Block Length
ChildBlockLengthCheck.desc = This check detects the child blocks, which length is more then 80% of parent block length.<br><p>Supported keywords are used to detect blocks:<br>"if", "else", "for", "switch", "do", "while", "try", "catch".</p><p><i>Rationale:</i></p><p>Length of child block that is more then 80% of parent block is usually hard to read in case child block is long(few display screens). Such child blocks should be refactored or moved to separate method.
ChildBlockLengthCheck.blockTypes = Option to switch the block types that will be checked. 
ChildBlockLengthCheck.maxChildBlockPercentage = Maximum percentage ratio between the child block and the parent block. Default value = 80%;
ChildBlockLengthCheck.ignoreBlockLinesCount = Maximum number of lines of which block body may consist to be skipped by check.

NoMainMethodInAbstractClassCheck.name = No Main Method In Abstract Class
NoMainMethodInAbstractClassCheck.desc = Forbids main methods in abstract classes. Rationale: existence of 'main' method can mislead a developer to consider this class as a ready-to-use implementation.

ForbidWildcardAsReturnTypeCheck.name = Forbid Wildcard As Return Type
ForbidWildcardAsReturnTypeCheck.desc = Prevents using wildcards as return type of methods.<p><i>Joshua Bloch, "Effective Java (2nd edition)" Item 28: page 137 :</i></p> <p>"Do not use wildcard types as return types. Rather than providing additional flexibility for your users, it would force them to use wildcard types in client code. Properly used, wildcard types are nearly invisible to users of a class. They cause methods to accept the parameters they should accept and reject those they should reject. If the user of a class has to think about wildcard types, there is probably something wrong with the class\u2019s API."</p>
ForbidWildcardAsReturnTypeCheck.checkPublicMethods = Check public methods 
ForbidWildcardAsReturnTypeCheck.checkPackageMethods = Check protected-package methods
ForbidWildcardAsReturnTypeCheck.checkProtectedMethods = Check protected methods
ForbidWildcardAsReturnTypeCheck.checkPrivateMethods = Check private methods
ForbidWildcardAsReturnTypeCheck.checkOverrideMethods = Check override methods
ForbidWildcardAsReturnTypeCheck.checkDeprecatedMethods = Check deprecated methods
ForbidWildcardAsReturnTypeCheck.allowReturnWildcardWithSuper = Allow wildcard with "super". Example: "? super T"
ForbidWildcardAsReturnTypeCheck.allowReturnWildcardWithExtends = Allow wildcard with "extends". Example: "? extends T"
ForbidWildcardAsReturnTypeCheck.returnTypeClassNamesIgnoreRegex = Ignore regex for return type class names

PublicReferenceToPrivateTypeCheck.name = Public Reference To Private Type
PublicReferenceToPrivateTypeCheck.desc = <p>This Check warns on propagation of inner private types to outer classes:<br>- Externally accessible method if it returns private inner type.<br>- Externally accessible field if it's type is a private inner type.<br>These types could be <a href='http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html'>private inner classes</a>, interfaces or enumerations.<br><br>Examples:<code><pre> class OuterClass {<br><br>  public InnerClass innerFromMain = new InnerClass(); //WARNING<br>  private class InnerClass { ... }<br>  public InnerClass  getValue() { //WARNING<br>      return new InnerClass();<br>  }<br><br>  private interface InnerInterface { ... }<br>  public Set&ltInnerInterface&gt getValue() { //WARNING<br>      return new TreeSet&ltInnerInterface&gt;;<br>  }<br><br>  private Enum Fruit {Apple, Pear}<br>  public Fruit getValue() { //WARNING<br>      return Fruit.Apple;<br>  }<br><br>  public someMethod(InnerClass innerClass) { ... }  //WARNING<br><br> }</pre></code><b>Rationale:</b> it is possible to return<br>private inner type or use it as the parameter of non-private method, but it is impossible<br>to use it in other classes (besides inner classes)<br>unless it extends or implements at least one <u>non-private</u> class or interface.<br>Such situation usually happens after bulk refactoring and usually means dead/useless code<br></p><br>@author <a href="mailto:nesterenko-aleksey@list.ru">Aleksey Nesterenko</a>

StaticMethodCandidateCheck.name = Static Method Candidate
StaticMethodCandidateCheck.desc = Checks whether <code>private</code> methods should be declared as <code>static</code>.
StaticMethodCandidateCheck.skippedMethods = Method names to skip during the check.

ConstructorWithoutParamsCheck.name = Constructor Without Params
ConstructorWithoutParamsCheck.desc = This check prohibits usage of parameterless constructors, including the default ones. Rationale: constructors of certain classes must always take arguments to properly instantiate objects.
ConstructorWithoutParamsCheck.classNameFormat = The regexp to match class names against. Default value = ".*Exception".
ConstructorWithoutParamsCheck.ignoredClassNameFormat = The regexp to select class names to ignore. Default value = "UnsupportedOperationException".

NestedSwitchCheck.name = Nested Switch
NestedSwitchCheck.desc = This check ensures that there is no switch block inside other switch block. In such case nested block should be exposed into new method.
NestedSwitchCheck.max = Maximum allowed nesting depth. 

HideUtilityClassConstructorCheck.name = Hide Utility Class Constructor
HideUtilityClassConstructorCheck.desc = Make sure that utility classes (classes that contain only static methods) do not have a public constructor.

InnerClassCheck.name = Inner Class
InnerClassCheck.desc = Check nested (internal) classes to be declared at the bottom of the class after all methods (fields) declaration.

CheckstyleTestMakeupCheck.name = Checkstyle Test Makeup
CheckstyleTestMakeupCheck.desc = Custom check to ensure Checkstyle tests are designed correctly.
CheckstyleTestMakeupCheck.createMethodRegexp = Regular expression for matching a create configuration method by name.
CheckstyleTestMakeupCheck.verifyMethodRegexp = Regular expression for matching a verify method by name.
