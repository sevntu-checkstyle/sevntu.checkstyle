AvoidConstantsInInterfaces.name = Avoid Constants in Interfaces
AvoidConstantsInInterfaces.desc = Reports if the interface contains the declaration of constants

AvoidHidingCauseException.name = Avoid Hiding Cause of the Exception
AvoidHidingCauseException.desc = Warns when you try to hide cause of an exception when rethrowing

AvoidNotShortCircuitOperatorsForBoolean.name = Avoid using bitwise operations for boolean expressions
AvoidNotShortCircuitOperatorsForBoolean.desc = Avoid using bitwise operations for boolean expressions

CustomDeclarationOrder.name = Custom Declaration Order
CustomDeclarationOrder.desc = Checks the class for a custom oder of declarations

ReturnNullInsteadOfBoolean.name = Returning Null Instead of Boolean
ReturnNullInsteadOfBoolean.desc = Method declares to return Boolean, but returns null

IllegalCatchExtended.name = Illegal Catch Check Extended
IllegalCatchExtended.desc = Check for illegal catch but with option to ignore these catches in some cases

MultipleVariableDeclarationsExtended.name = Multiple Variable Declarations Extended
MultipleVariableDeclarationsExtended.desc = Warn when declaring several variables in one line

MultipleStringLiteralsExtended.allowedDuplicates       = The maximum number of occurences to allow without generating a warning
MultipleStringLiteralsExtended.desc                    = Checks for multiple occurrences of the same string literal within a single file.<br/>\r\nRationale: Code duplication makes maintenance more difficult, so it can be better to replace the multiple occurrences with a constant.
MultipleStringLiteralsExtended.ignoreOccurrenceContext = Token type names where duplicate strings are ignored even if they don't match ignoredStringsRegexp. This allows you to exclude syntactical contexts like Annotations or static initializers from the check.
MultipleStringLiteralsExtended.ignoreStringsRegexp     = Regexp pattern for ignored strings (with quotation marks)
MultipleStringLiteralsExtended.name                    = Multiple String Literals Extended
MultipleStringLiteralsExtended.highlightAllDuplicates  = Check to highlight all dublicates

OverridableMethodInConstructor.desc = <p>Prevents any calls to overridable methods that are take place in:<ol><li>Any constructor body (verification is always done by default and not configurable).<li>Any method which works same as a constructor: clone() method from Cloneable interface and readObject() method from Serializable interface (you can individually switch on/of these methods verification by changing CheckCloneMethod and CheckReadObjectMethod properties).</li></ol><p>Rationale:<ol><li><q>Constructors must not invoke overridable methods, directly or indirectly.If you violate this rule, program failure will result. The superclass constructor runs before the subclass constructor, so the overriding method in the subclass will be invoked before the subclass constructor has run. If the overriding method depends on any initialization performed by the subclass constructor, the method will not behave as expected.</q><li><q>If you do decide to implement Cloneable or Serializable in a class designed for inheritance, you should be aware that because the clone() and readObject() methods behave a lot like constructors, a similar restriction applies: neither clone nor readObject may invoke an overridable method, directly or indirectly.</q></ol></p><br><p align="right">[Joshua Bloch - Effective Java 2nd Edition,Chapter 4, Item 17]</p><br>
OverridableMethodInConstructor.name = Overridable Method In Constructor
OverridableMethodInConstructor.checkCloneMethod = Enables the searching of calls to overridable methods from body of any clone() method is implemented from Cloneable interface.
OverridableMethodInConstructor.checkReadObjectMethod = Enables the searching of calls to overridable methods from the body of any readObject() method is implemented from Serializable interface.

UnnecessaryParenthesesExtended.desc = Checks for the use of unnecessary parentheses.
UnnecessaryParenthesesExtended.name = Unnecessary Parentheses Extended
UnnecessaryParenthesesExtended.ignoreCalculationOfBooleanVariables =           Cancel validation setups of unnecessary parentheses in Boolean computations.
UnnecessaryParenthesesExtended.ignoreCalculationOfBooleanVariablesWithReturn = Cancel validation setups of unnecessary parentheses in Boolean computations with return state.
UnnecessaryParenthesesExtended.ignoreCalculationOfBooleanVariablesWithAssert = Cancel validation setups of unnecessary parentheses in Boolean computations with assert state.

