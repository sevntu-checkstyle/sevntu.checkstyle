AvoidConstantsInInterfaces.name = Avoid Constants in Interfaces
AvoidConstantsInInterfaces.desc = Reports if the interface contains the declaration of constants

AvoidDefaultSerializableInInnerClasses.name = Avoid default implementation of serializable interface
AvoidDefaultSerializableInInnerClasses.desc = Warns when your implementation serializable interface are default

AvoidHidingCauseException.name = Avoid Hiding Cause of the Exception
AvoidHidingCauseException.desc = Warns when you try to hide cause of an exception when rethrowing

AvoidNotShortCircuitOperatorsForBoolean.name = Avoid using bitwise operations for boolean expressions
AvoidNotShortCircuitOperatorsForBoolean.desc = Avoid using bitwise operations for boolean expressions

AvoidModifiersForTypes.name = Avoid Modifiers For Types
AvoidModifiersForTypes.desc = Disallow some set of modifiers for Java types specified by regexp.<br><br>Only 4 types according to Java Spec: static, final, transient, volatile.<br><br>Example:<br>"static" modifier for ULCComponents (http://ulc-community.canoo.com/snipsnap/space/Good+Practices) is not allowed.<br>So we can disallow "static" modifier for all ULC* components by setting up "forbiddenClassesRegexpStatic" option to "ULC.+" regexp String.
AvoidModifiersForTypes.forbiddenClassesRegexpFinal = The regexp defines the names of classes, that could not have 'final' modifier.
AvoidModifiersForTypes.forbiddenClassesRegexpStatic = The regexp defines the names of classes, that could not have 'static' modifier.
AvoidModifiersForTypes.forbiddenClassesRegexpTransient = The regexp defines the names of classes, that could not have 'transient' modifier.
AvoidModifiersForTypes.forbiddenClassesRegexpVolatile = The regexp defines the names of classes, that could not have 'volatile' modifier.

CustomDeclarationOrder.name = Custom Declaration Order
CustomDeclarationOrder.desc = Checks the class for a custom oder of declarations

ForbidCertainImports.name = Forbid Certain Imports
ForbidCertainImports.desc = Forbids certain imports usage in class.<br>Idea was taken from the similar check in Sonar project.<br><br>Parameters:<ol><li>Package regexp;</li><li>Forbidden imports regexp.</li></ol>Check operates with packages/imports text in string representation without "package"/"import" words and semicolons. You can be sure to write any regular expressions for package/imports text filtering.<br><br>Example of usage: to forbid to use "*.dao.*" packages in "*.ui.*" packages, you should use the following regular expressions:<br><br><dl><li>".+.ui..+" as Package name regexp;</li><li>".+.dao..+" as Forbidden imports regexp.</li></dl><br>By means of few instances of this check will be possible to check any number of rules.<br>
ForbidCertainImports.packageNameRegexp = Package name regexp.
ForbidCertainImports.forbiddenImportRegexp = Forbidden import name regexp.

ForbidInstantiation.name = Forbid Instantiation
ForbidInstantiation.desc = Forbids instantiation of certain object types by their full classname.<br><p>For example:<br>"java.lang.NullPointerException" will forbid the NPE instantiation.</p><p>Note: className should to be full: use "java.lang.NullPointerException" instead of "NullpointerException".</p>
ForbidInstantiation.forbiddenClasses = ClassNames for objects that are forbidden to instantiate.

ForbidCCommentsInMethods.name = Forbid C comments in method body
ForbidCCommentsInMethods.desc = Forbid C-style comments in method body.

IllegalCatchExtended.name = Illegal Catch Check Extended
IllegalCatchExtended.desc = Check for illegal catch but with option to ignore these catches in some cases
IllegalCatchExtended.allowThrow = Allow catching when throwing some exception
IllegalCatchExtended.allowRethrow = Allow catching when re-throwing exception

LogicConditionNeedOptimizationCheck.name = Logic condition need optimization
LogicConditionNeedOptimizationCheck.desc = Shows, when you can optimize your logic condition

MultipleVariableDeclarationsExtended.name = Multiple Variable Declarations Extended
MultipleVariableDeclarationsExtended.desc = Warn when declaring several variables in one line

MultipleStringLiteralsExtended.allowedDuplicates       = The maximum number of occurences to allow without generating a warning
MultipleStringLiteralsExtended.desc                    = Checks for multiple occurrences of the same string literal within a single file.<br/>\r\nRationale: Code duplication makes maintenance more difficult, so it can be better to replace the multiple occurrences with a constant.
MultipleStringLiteralsExtended.ignoreOccurrenceContext = Token type names where duplicate strings are ignored even if they don't match ignoredStringsRegexp. This allows you to exclude syntactical contexts like Annotations or static initializers from the check.
MultipleStringLiteralsExtended.ignoreStringsRegexp     = Regexp pattern for ignored strings (with quotation marks)
MultipleStringLiteralsExtended.name                    = Multiple String Literals Extended
MultipleStringLiteralsExtended.highlightAllDuplicates  = Check to highlight all dublicates

OverridableMethodInConstructor.desc = <p>Prevents any calls to overridable methods that are take place in:<ol><li>Any constructor body (verification is always done by default and not configurable).<li>Any method which works same as a constructor: clone() method from Cloneable interface and readObject() method from Serializable interface (you can individually switch on/of these methods verification by changing CheckCloneMethod and CheckReadObjectMethod properties).</li></ol><p>Rationale:<ol><li><q>Constructors must not invoke overridable methods, directly or indirectly.If you violate this rule, program failure will result. The superclass constructor runs before the subclass constructor, so the overriding method in the subclass will be invoked before the subclass constructor has run. If the overriding method depends on any initialization performed by the subclass constructor, the method will not behave as expected.</q><li><q>If you do decide to implement Cloneable or Serializable in a class designed for inheritance, you should be aware that because the clone() and readObject() methods behave a lot like constructors, a similar restriction applies: neither clone nor readObject may invoke an overridable method, directly or indirectly.</q></ol></p><br><p align="right">[Joshua Bloch - Effective Java 2nd Edition,Chapter 4, Item 17]</p><br>
OverridableMethodInConstructor.name = Overridable Method In Constructor
OverridableMethodInConstructor.checkCloneMethod = Enables the searching of calls to overridable methods from body of any clone() method is implemented from Cloneable interface.
OverridableMethodInConstructor.checkReadObjectMethod = Enables the searching of calls to overridable methods from the body of any readObject() method is implemented from Serializable interface.

ReturnBooleanFromTernary.name = Returning Boolean from Ternary Operator
ReturnBooleanFromTernary.desc = Avoid returning boolean values from ternary operator - use the boolean value from the inside directly.

ReturnCountExtended.name=Return Count Check Extended
ReturnCountExtended.desc=Checks that method/ctor "return" literal count is not greater than the given value ("maxReturnCount" property).<br><br>Rationale:<br><br>One return per method is a good practice as its ease understanding of method logic.<br><br>Reasoning is that:<dl><li>It is easier to understand control flow when you know exactly where the method returns.<li>Methods with 2-3 or many "return" statements are much more difficult to understand, debug and refactor.</dl>Setting up the check options will make it to ignore:<ol><li>Methods by name ("ignoreMethodsNames" property). Note, that the "ignoreMethodsNames" property type is NOT regexp: using this property you can list the names of ignored methods separated by comma.</li><li>Methods which linelength less than given value ("linesLimit" property).<li>"return" statements which depth is greater or equal to the given value ("returnDepthLimit" property). There are few supported<br>coding blocks when depth counting: "if-else", "for", "while"/"do-while" and "switch".<li>"Empty" return statements = return statements in void methods and ctors that have not any expression ("ignoreEmptyReturns" property).<li>Return statements, which are located in the top lines of method/ctor (you can specify the count of top method/ctor lines that will be ignored using "rowsToIgnoreCount" property).</ol>So, this is much improved version of the existing <i>Return Count</i> check.<br><br>
ReturnCountExtended.maxReturnCount=maximum allowed number of return statements per method/ctor (1 by default).
ReturnCountExtended.ignoreMethodLinesCount=Option to ignore methods/ctors which body has the linelength is less than given (20 lines by default). Set "0" to switch this option off and check all methods/ctors.
ReturnCountExtended.minIgnoreReturnDepth=Option to ignore methods/ctors that have return statement(s) with depth value is less than N levels(scopes). 4 by default. 0 is the min depth. Depth is 0 when the "return" statement is not wrapped on one of the supported coding blocks. 
ReturnCountExtended.ignoreEmptyReturns=Option to ignore "empty" (with no any expression) return statements in void methods and ctors. 'False' by default.
ReturnCountExtended.topLinesToIgnoreCount=Option to set the count of code lines that will be ignored in top of all methods.
ReturnCountExtended.ignoreMethodsNames=Option to set the names of methods which would be ignored by check.

ReturnNullInsteadOfBoolean.name = Returning Null Instead of Boolean
ReturnNullInsteadOfBoolean.desc = Method declares to return Boolean, but returns null

RedundantReturnCheck.name=Redundant Return Check
RedundantReturnCheck.desc=Check code for presence of redundant return
RedundantReturnCheck.allowReturnInEmptyMethodsAndConstructors=If True, allow 'return' in empty constructors and methods that return void.

SimpleAccesorNameNotationCheck.name=Simple Accesor Name Notation
SimpleAccesorNameNotationCheck.desc=This check verify incorrect name of setter or getter methods if it used field with other name. For example, method has name 'setXXX', but define field with name 'YYY'
SimpleAccesorNameNotationCheck.prefix=prefix of field's name

UnnecessaryParenthesesExtended.desc = Checks for the use of unnecessary parentheses.
UnnecessaryParenthesesExtended.name = Unnecessary Parentheses Extended
UnnecessaryParenthesesExtended.ignoreCalculationOfBooleanVariables =           Cancel validation setups of unnecessary parentheses in Boolean computations.
UnnecessaryParenthesesExtended.ignoreCalculationOfBooleanVariablesWithReturn = Cancel validation setups of unnecessary parentheses in Boolean computations with return state.
UnnecessaryParenthesesExtended.ignoreCalculationOfBooleanVariablesWithAssert = Cancel validation setups of unnecessary parentheses in Boolean computations with assert state.